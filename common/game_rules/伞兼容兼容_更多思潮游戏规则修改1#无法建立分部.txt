#Tooltips will be generated from these rules when they fail. Use of custom_tooltip is recommended
#There are still multiple hard-coded rules that apply in addition to these.
#If rules here evaluate to true, there might still be other rules that make the action unavailable.
#If a rule here evaluates to false the action will become unavailable

###华章注：感谢小伞的泛用兼容对本人的代码支持

#格式塔的工作判定
#this/root = pop
#checked if job's possible_precalc = can_fill_drone_job
can_fill_drone_job = {
	custom_tooltip = DRONE_JOB_TRIGGER
	hidden_trigger = {
		exists = owner
		owner = { is_gestalt = yes }
		is_being_purged = no
		is_being_assimilated = no
		NOT = { has_citizenship_type = { type = citizenship_organic_trophy } }
		NOT = { has_citizenship_type = { type = citizenship_limited } }
	}
}

#统治者阶级的工作判定
#this/root = pop
#checked if job's possible_precalc = can_fill_ruler_job
can_fill_ruler_job = {
	if = {
		limit = {
			exists = owner
			owner = {
				has_origin = origin_necrophage
				has_trait = trait_necrophage
			}
		}
		custom_tooltip = {
			text = RULER_JOB_NECROPHAGE_TRIGGER
			has_trait = trait_necrophage
			is_enslaved = no
			is_being_purged = no
			is_being_assimilated = no
		}
	}
	else_if = {
		limit = {
			has_global_flag = eci_educated
			exists = owner
			owner = {
				OR = {
					has_valid_civic = civic_moth_chasing_flames
					has_valid_civic = civic_ruthless_competition
				}
			}
		}
		custom_tooltip = {
			text = POP_EDUCATED_LOW
			has_modifier = pop_highly_educated
		}
	}
	else_if = {
		custom_tooltip =  POP_EDUCATED_LOW
		hidden_trigger = { NOT = { has_modifier = pop_slave_educated } }
	}
	else_if = {
		custom_tooltip = RULER_JOB_TRIGGER
		hidden_trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
			exists = owner
			OR = {
				is_enslaved = no
				owner = { has_civic = civic_du_contrat_social }
			}
			is_being_purged = no
			is_being_assimilated = no
			NOT = { has_trait = trait_syncretic_proles }
			NOT = { has_trait = trait_nerve_stapled }
			NOT = { has_trait = trait_zombie }
			NOT = { has_trait = trait_flesh_components }
			NOT = { has_trait = trait_fallen_god }
			OR = {
				NOT = { has_trait = trait_mechanical }
				AND = {
					owner = {
						OR = {
							AND = {
								NOT = { has_trait = trait_thl_doll }
								owner = {
									has_technology = tech_synthetic_workers
								}
							}
							AND = {
								has_trait = trait_thl_doll
								owner = {
									has_technology = tech_sapient_dolls
								}
							}
						}
					}
					owner = { has_policy_flag = ai_full_rights }
				}
			}
			NOT = { has_citizenship_type = { type = citizenship_organic_trophy } }
			if = {
				limit = {
					divinity_right_to_work_job_check_trigger_exempt = no
				}
				divinity_right_to_work_job_check_trigger_ruler = yes
			}
		}
	}
}

#劳工阶级的工作判定
#this/root = pop
#checked if job's possible_precalc = can_fill_worker_job
can_fill_worker_job = {
	if = {
		limit = {
			has_global_flag = eci_educated
			exists = owner
			owner = {
				OR = {
					has_valid_civic = civic_moth_chasing_flames
					has_valid_civic = civic_ruthless_competition
				}
			}
		}
		custom_tooltip = {
			text = POP_EDUCATED_LOW
			has_modifier = pop_highly_educated
		}
	}
	else = {
		custom_tooltip = WORKER_JOB_TRIGGER
		hidden_trigger = {
			NOT = { has_ethic = ethic_gestalt_consciousness }
			exists = owner
			is_being_purged = no
			is_being_assimilated = no
			ethic_sparta_job_check_trigger = no
			NOT = { has_citizenship_type = { type = citizenship_organic_trophy } }
			NOT = { has_trait = trait_fallen_god }
			NAND = {
				has_citizenship_type = { type = citizenship_slavery }
				OR = {
					has_slavery_type = { type = slavery_livestock }
					has_slavery_type = { type = slavery_matrix }
				}
			}
			if = {
				limit = {
					divinity_right_to_work_job_check_trigger_exempt = no
				}
				divinity_right_to_work_job_check_trigger_worker = yes
			}
		}
	}
}

#犯罪企业的判定条件
# This = country
# Checked by is_criminal_syndicate trigger
is_criminal_syndicate_rule = {
	#	|政体|
	OR = {
		has_authority = auth_corporate
		has_valid_civic = civic_galactic_sovereign_megacorp
		has_valid_civic = civic_underworld_society
		#	UGRC
		has_country_flag = UGRC_flg_cntr_RULE_criminal_syndicate

		#	wsg
		has_authority = auth_warshipgirls
	}
	#	|国策|
	OR = {
		has_valid_civic = civic_criminal_heritage
		#	UGRC
		has_country_flag = UGRC_flg_cntr_RULE_criminal_syndicate

		#	Ecar
		has_civic = civic_family_business
		has_civic = civic_world_cooperative
		has_valid_civic = civic_underworld_society
		#	wsg
		has_civic = civic_sh_criminal_syndicate
		#	ev
		has_valid_civic = civic_ev_criminal_ship
	}
}

#能当领袖的POP限制
#Root = country
#This = pop
can_generate_leader_from_pop = {
	has_citizenship_rights = yes
	#	NOT = { has_trait = trait_syncretic_proles }
	can_think = yes
	## +无言/Ereb/hiveDLC/PTep/Eevt/ETCPM
	NOR = {
		has_trait = trait_syncretic_proles

		# 无言
		has_trait = trait_protoss_probe
		# Ecar
		has_trait = trait_flesh_components
		# Ereb
		has_trait = trait_slave_gene
		# hiveDLC
		root = { has_origin = origin_hive_overmind }
		# PTep
		has_trait = trait_plentiful_traditions_pt_cocoon
		# Eevt/ETCPM
		has_trait = trait_memorex_comatos
		has_trait = trait_infested_basic
		# 莉莉
		has_trait = trait_AL_puffer
		# 魔女
		has_trait = trait_servitude
		# GF
		has_trait = GF_trait_doll
	}
	## +GF/魔女
	OR = {
		is_robot_pop = no
		root = {
			OR = {
				has_technology = tech_synthetic_leaders
				has_authority = auth_machine_intelligence
				is_mechanical_empire = yes
				#	GF
				has_technology = tech_mind_plus
				#	魔女
				has_technology = tech_dummy_leaders
			}
		}
	}
	OR = {
		is_same_species = root
		root = {
			NAND = {
				has_origin = origin_necrophage
				has_trait = trait_necrophage
			}
		}
	}

	##	rmaid
	if = {
		limit = {
			has_global_flag = flag_rogue_maid_mod_activated
			root = { has_civic = civic_machine_servitor }
		}
		is_same_species = root
	}
}

##附庸自由扩张的条件
# Root = country
# This = country
subject_can_expand = {
	# Exalted domination totally disallow vassal expansion
	NOT = { has_global_flag = has_exalted_domination_mod }
	root = {
		OR = {
			has_valid_civic = civic_feudal_realm
			# Ecar
			has_valid_civic = civic_eternal_kingship
			has_valid_civic = civic_aristocratic_elite
			has_valid_civic = civic_sovereign_federation
			is_valid_coalition_government = yes
			has_valid_civic = civic_altruism
			# ETCPM
			has_policy_flag = vassal_expansion_allowed
		}
	}
	NAND = {
		is_ai = yes
		AND = {
			exists = overlord
			overlord = { has_origin = origin_imperial_vassal_overlord }
		}
	}
}

#能否开除领袖
# this = leader
can_dismiss_leader = {
	if = {
		limit = {
			leader_class = admiral
			is_idle = no
			# Rulers and heirs can't be dismissed any way and can be non-idle
			is_ruler = no
			is_heir = no
		}
		custom_tooltip = {
			fail_text = "requires_fleet_control"
			exists = fleet
			fleet = {
				controller = {
					is_same_value = prev.owner
					is_same_value = prevprev.owner
				}
			}
		}
	}
	if = {
		limit = {
			OR = {
				is_heir = yes
				is_ruler = yes
			}
		}
		custom_tooltip = {
			always = no
			fail_text = "can_not_dismiss_rulers"
		}
	}

	# SC
	custom_tooltip = {
		fail_text = "cannot_fire_StellarisCraft_leader"
		NOT = { has_leader_flag = StellarisCraft_event_leader }
	}
	# Ecar
	custom_tooltip = {
		fail_text = "requires_actor_not_coalition_government_society"
		exists = owner
		owner = {
			NOR = {
				has_valid_civic = civic_sovereign_federation
			}
		}
	}
	custom_tooltip = {
		fail_text = "requires_actor_not_huazhang"
		NOT = { has_leader_flag = huazhang }
	}
}

#检查是否可以组装pop
# This = Species
# Root = Planet
can_species_be_assembled = {
	is_sapient = yes
	has_population_control = {
		value = no
		country = root.owner
	}
	##_|基础条件|
	OR = {
		#_|原版智械|	+azl/GF/魔女/久远
		AND = {
			is_robotic = yes	# 含|是wsg物种|
			NOR = {
				has_trait = trait_robot_mind_relic_core	# azl
				has_trait = trait_reassembler			# 时与空
			}
			###车万领袖
			OR = {
				NOT = { has_trait = trait_thl_doll }
				AND = {
					root = {
						check_variable_arithmetic = { which = value:doll_missing_per_maker value >= 0 }
						OR = {
							any_owned_pop = {
								has_job = dollmaker
							}
							AND = {
								exists = leader
								leader = {
									has_trait = leader_trait_dolls
								}
							}
						}
					}
				}
				AND = {
					root = {
						owner = {
							has_technology = tech_sapient_dolls
						}
						OR = {
							any_owned_pop = {
								has_job = dollmaker
							}
							AND = {
								exists = leader
								leader = {
									has_trait = leader_trait_dolls
								}
							}
						}
					}
				}
			}
			#	魔女
			if = { limit = { has_trait = trait_dummy }
				if = { limit = { root.owner = { has_origin = origin_garbage_princesses } }
					root = {
						OR = {
							has_building = building_enigmatic_assembly_plant
							num_assigned_jobs = {
								job = dummicist
								value > 0
							}
						}
						check_modifier_value = {
							modifier = planet_pop_assembly_add
							value > 0
						}
					}
				}
				else = {
					root.owner = { has_technology = tech_dummy_workers }
					root = {
						num_assigned_jobs = {
							job = dummicist
							value > 0
						}
					}
					root = {
						check_modifier_value = {
							modifier = planet_pop_assembly_add
							value > 0
						}
					}
				}
			}
			#	久远
			if = {
				limit = { root = { has_active_building = building_KZ_VOY_homunculus_furnace } }
				root = { has_planet_flag = KZ_VOY_homunculus_furnace_assembly_integration_off_flag }
			}
			else_if = {
				limit = { has_trait = trait_KZ_VOY_magic_puppet }
				KZ_VOY_can_assemble_magic_puppet = yes
			}
			#	GF
			else_if = { limit = { has_trait = GF_trait_doll }
				root.owner = {
					OR = {
						has_authority = GF_auth_commonwealth
						is_valid_GF_OGAS_subnet = yes
					}
				}
			}
			#_|v默认|	+azl
			else = {
				root = {
					check_modifier_value = {
						modifier = planet_pop_assembly_add
						value > 0
					}
					owner = {
						NOR = {# 这类mod国家不组装机器人
							# azl
							has_authority = auth_azur_lane_1
							has_authority = auth_azur_lane_2
							has_authority = auth_azur_lane_K
							# GF
							has_authority = auth_commonwealth
						}
					}
				}
			}
		}
		#_|原版克隆|
		AND = {
			is_organic_species = yes
			#_|v蜂群|	+Ecar
			if = {
				limit = {
					OR = {
						has_trait = trait_hive_mind
						# Ecar
						has_trait = trait_psionic_link
					}
				}
				root.owner = { is_hive_empire = yes }
			}
			#_|v植物|
			else_if = {
				limit = { has_budding_trait = yes }
				root = {
					any_owned_species = { is_exact_same_species = prevprev }
				}
			}
			#_|v鲸族|
			else_if = {
				limit = { has_trait = trait_tiyanki }
				root = {
					any_owned_species = { is_exact_same_species = prevprev }
				}
			}
			#_|v义体|
			else_if = {
				limit = { has_trait = trait_cybernetic }
				root.owner = {
					has_tradition = tr_cybernetics_assembly_standards
					has_policy_flag = roboticist_output_build_cyborgs
				}
			}
			#_|v克隆军|		+星海帝皇
			else_if = {
				limit = {
					OR = {
						has_trait = trait_clone_soldier_infertile
						has_trait = trait_clone_soldier_infertile_full_potential
					}
				}
				root = {
					# Event 'clones.3' should cover this, but extra safety check.
					OR = {
						has_building = building_clone_army_clone_vat
						#	星海帝皇
						has_building = building_clone_guard_clone_vat
						has_building = building_clone_vats
					}
					NOT = {
						check_variable = {
							which = clone_pops_missing
							value = 0
						}
					}
				}
			}
			#_|通用|=|存在克隆+特殊spcs|		+FW/星海帝皇/Ecar
			else = {
				root = {
					OR = {
						#	vanilla
						has_building = building_clone_vats	# 提供|planet_pop_assembly_organic_add|
						has_modifier = tiyanki_trophy
						owner = { has_modifier = syamelles_curse }
						AND = {
							has_building = building_posthumous_employment_center
							owner = { has_civic = civic_permanent_employment }
						}
						has_planet_flag = can_organic_assemble_flag #for mod compatibility

						#	星海帝皇
						has_building = building_clone_guard_clone_vat
						#	FW
						#check_modifier_value = { modifier = planet_pop_assembly_organic_add value > 0 }
						#	Ecar
						has_building = building_advanced_clone_vats
					}
				}
			}
		}
		#	UGRC组装物种
		UGRC_trgr_spcs_ASSEMBLY = yes
		#	WSG物种/wsg
		UGRC_trgr_spcs_WSG = yes

		#	Ecar苗床
		AND = {
			root = {
				check_modifier_value = {
					modifier = planet_pop_assembly_organic_add
					value > 0
				}
				has_building = building_equipment_breeding_plant
				owner = { has_civic = civic_libido_equipment }
			}
		}
		#	久远
		KZ_VOY_trgr_plnt_CLONE = yes
		#	azl/azlr
		AND = {
			OR = {
				is_Azur_Lane_organic_species = yes
				is_KANSEN_species = yes
			}
			root = {
				check_modifier_value = {
					modifier = planet_pop_assembly_organic_add
					value > 0
				}
			}
		}
		#	GF
		AND = {
			has_trait = trait_doll
			root.owner = { has_authority = auth_commonwealth }
		}
		#	PTep
		AND = {
			has_trait = trait_plentiful_traditions_pt_cocoon
			root.owner = { has_ascension_perk = ap_total_assimilation }
		}
		#	SC
		is_archetype = DPURIFIER	# 净化者
		#	EE
		is_archetype = ASCENDED
	}

	##	微械
	root.owner = { NOT = { has_modifier = modifier_ban_assemble } }
	##	hiveDLC
	NAND = {
		has_trait = trait_machine_central
		root.owner = { has_valid_civic = civic_machine_replicators }
	}
	##	多彩
	if = { limit = { has_global_flag = love_between_us }
		OR = {
			AND = {
				OR = {
					is_robotic = yes
					is_species_class = RBQ
					is_species_class = SGPC
				}
				root = {
					has_building = building_robot_assembly_plant
				}
			}
			AND = {
				is_species_class = Magical_Tentacle
				root = {
					OR = {
						has_building = building_tentacle_seedbed
						has_building = building_tentacle_seedbed2
						has_building = building_spawning_sanctuary
					}
				}
			}
			AND = {
				is_robotic = yes
				has_trait = wawa_trait_FUTA
				ROOT = {
					owner = {
						has_country_flag = wawa_FUTA_alow
					}
					OR = {
						is_planet_class = pc_futa_ring_world
						has_building = building_futa_wawa
					}
				}
			}
			AND = {
				is_organic_species = yes
				ROOT = {
					NOR = {
						is_planet_class = pc_futa_ring_world
						has_building = building_futa_wawa
					}
				}
				root = {
					check_modifier_value = {
						modifier = planet_pop_assembly_organic_add
						value > 0
					}
				}
			}
		}
	}
	##	久远
	else_if = {
		limit = {
			OR = {
				has_trait = trait_KZ_VOY_sub_terran_dragon
				has_trait = trait_KZ_VOY_sub_terran_dragon_SP
			}
		}
		KZ_VOY_trgr_plnt_CLONE = yes
	}
}

#是否能够进行杂交
# This = planet
can_crossbreed_species_on_planet = {
	exists = owner
	#	|PF|开关
	NOT = { has_global_flag = PF_flg_glbl_Hybrid_no }
	#	wsg/SC	禁止ntr
	any_owned_species = {
		NOR = {
			#	wsg
			has_wg_traits = yes
			is_archetype = WARSHIPGIRL
			is_archetype = SHENHAI
			is_archetype = UNITED_FLEET
			is_archetype = NANITES_CROP
			#	SC
			UGRC_trgr_spcs_SC = yes
		}
	}

	AND = {
		# +Ecar
		owner = {
			OR = {
				has_ascension_perk = ap_xeno_compatibility
				# Ecar
				AND = {
					has_valid_civic = civic_liberty_of_libido
					has_ascension_perk = ap_engineered_evolution
				}
			}
		}
		count_species = {
			limit = { is_crossbreeding_possible = yes }
			count >= 2
		}
	}
}

#是否能够进行基因改造
# Root = country
# This = species
can_modify_species = {
	OR = {
		NOR = {
			has_trait = trait_self_modified
			has_trait = trait_fallen_god
			has_trait = trait_unnatural
		}
		is_same_species = root
	}
}

#是否能够使用银河市场
# This = country
can_use_galactic_market = {
	NOT = { check_modifier_value = { modifier = country_trade_fee value > 1 } }
	OR = {
		is_country_type = default

		#	ev
		AND = {
			is_country_type = default_ev
			NOT = { has_policy_flag = ev_no_use_galactic_market }
		}
		#	ZOFE
		is_country_type = ascended_empire
		is_country_type = lost_empire
		#	SOFE
		is_country_type = sbtg_stellarborne_empire_active
		#	EE
		is_country_type = eternal_empire
	}

	NOR = {
		has_civic = civic_fanatic_purifiers
		has_civic = civic_hive_devouring_swarm
		has_civic = civic_machine_terminator

		# Ecar
		AND = {
			has_ethic = ethic_gestalt_consciousness
			NOT = {  has_tradition = tr_future_economy }
		}

		#	UR
		has_country_flag = dark_side
	}
}

#是否能够更换内阁
# this = country
can_country_change_councilors = {
	OR = {
		is_gestalt = no
		has_civic = civic_network_of_the_mind
		has_civic = civic_network_of_the_mind_machine
		has_civic = civic_network_of_the_mind_true_hive
	}
}

#领袖能获得理事会特质吗
# this = leader
can_leader_get_council_trait = {
	NAND = {
		exists = owner
		owner = {
			is_gestalt = yes
			NOR = {
				has_civic = civic_network_of_the_mind
				has_civic = civic_network_of_the_mind_machine
				has_civic = civic_network_of_the_mind_true_hive
			}
		}
		is_councilor = no
	}
}

#领袖能获得普通特质吗
# this = leader
can_leader_get_normal_trait = {
	NOR = {
		AND = {
			exists = owner
			owner = {
				is_gestalt = yes
				NOR = {
					has_civic = civic_network_of_the_mind
					has_civic = civic_network_of_the_mind_machine
					has_civic = civic_network_of_the_mind_true_hive
				}
			}
			is_councilor = yes
		}
		AND = {
			is_ruler = yes
			exists = owner
			owner = {
				OR = {
					has_authority = auth_dictatorial
					has_authority = auth_imperial
				}
			}
		}
	}
}